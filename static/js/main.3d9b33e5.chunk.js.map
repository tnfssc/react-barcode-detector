{"version":3,"sources":["../../src/index.tsx","App.tsx","index.tsx"],"names":["window","videoRef","useRef","canvasRef","imgRef","useEffect","navigator","video","facingMode","audio","stream","error","console","ref","width","autoPlay","style","display","React","height","onClick","context","codeReader","App","ReactDOM","render","document","getElementById"],"mappings":"iSAIKA,OAAL,kBAA6BA,4BAE7B,I,EAAkB,WAChB,IAAMC,EAAWC,iBAAjB,MACMC,EAAYD,iBAAlB,MACME,EAASF,iBAAf,MACAG,qBAAU,WACRC,oCACgB,CAAEC,MAAO,CAAEC,WAAY,QAAUC,OAAO,IADxDH,MAESI,YACDT,EAAJ,UAAsBA,0BAH1BK,OAKUK,YACNC,sBAPNP,IAwBA,OACE,6BACE,2BAAOQ,IAAKZ,EAAUa,MAAO,IAAKC,UAAQ,IAC1C,4BAAQF,IAAKV,EAAWa,MAAO,CAAEC,QAAS,UAC1C,yBAAKJ,IAAKT,EAAQU,MAAO,MACzBI,6BACE,4BAAQF,MAAO,CAAEG,OAAQ,IAAMC,QApBf,WACpB,GAAKjB,EAAD,SAAuBF,EAAvB,SAA4CG,EAAhD,SACAD,gBAA0BF,UAA1BE,WACAA,iBAA2BF,UAA3BE,YACA,IAAMkB,EAAUlB,qBAAhB,MACA,GAAakB,YAAkBpB,EAAlBoB,aACbjB,cAAqBD,oBAArBC,gBAaEc,WAIE,4BAAQF,MAAO,CAAEG,OAAQ,IAAMC,QAfhB,W,MACf,UAAChB,EAAD,sBAACA,EAAL,MAEmB,IAAIJ,OAAvB,iBACAsB,OAAkBlB,EAAlBkB,cAAuCV,QAAvCU,OAGA,WAYEJ,6BAbJ,UCzBaK,G,MAJH,WACV,OAAO,kBAAC,EAAD,QCATC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.3d9b33e5.chunk.js","sourcesContent":["import React, { useEffect, useRef } from 'react'\n// @ts-ignore\nimport BarcodeDetectorPolyfill from 'barcode-detector-polyfill'\n// @ts-ignore\nif (!window.BarcodeDetector) window.BarcodeDetector = BarcodeDetectorPolyfill\n\nconst BarDetect = () => {\n  const videoRef = useRef<HTMLVideoElement>(null)\n  const canvasRef = useRef<HTMLCanvasElement>(null)\n  const imgRef = useRef<HTMLImageElement>(null)\n  useEffect(() => {\n    navigator.mediaDevices\n      .getUserMedia({ video: { facingMode: 'user' }, audio: false })\n      .then((stream) => {\n        if (videoRef.current) videoRef.current.srcObject = stream\n      })\n      .catch((error: unknown) => {\n        console.error(error)\n      })\n  }, [])\n  const handleCapture = () => {\n    if (!canvasRef.current || !videoRef.current || !imgRef.current) return\n    canvasRef.current.width = videoRef.current.videoWidth\n    canvasRef.current.height = videoRef.current.videoHeight\n    const context = canvasRef.current.getContext('2d')\n    if (context) context.drawImage(videoRef.current, 0, 0)\n    imgRef.current.src = canvasRef.current.toDataURL('image/png')\n  }\n  const handleDetect = () => {\n    if (!imgRef.current?.src) return\n    // @ts-ignore\n    const codeReader = new window.BarcodeDetector()\n    codeReader.detect(imgRef.current).then(console.log)\n  }\n  return (\n    <div>\n      <video ref={videoRef} width={600} autoPlay />\n      <canvas ref={canvasRef} style={{ display: 'none' }} />\n      <img ref={imgRef} width={100} />\n      <div>\n        <button style={{ height: 40 }} onClick={handleCapture}>\n          Capture\n        </button>\n        <button style={{ height: 40 }} onClick={handleDetect}>\n          Detect\n        </button>\n      </div>\n      <div>Test</div>\n    </div>\n  )\n}\n\nexport default BarDetect\n","import React from 'react'\n\nimport BarDetect from 'react-barcode-detector'\nimport 'react-barcode-detector/dist/index.css'\n\nconst App = () => {\n  return <BarDetect />\n}\n\nexport default App\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}